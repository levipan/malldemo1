## 题目0001-勾股数
勾股数
题目描述
如果三个正整数A、B、C ，A² + B² = C² 则为勾股数，
如果ABC之间两两互质，即A与B，A与C，B与C均互质没有公约数，则称其为勾股数元组。
请求出给定 n ~ m 范围内所有的勾股数元组。

输入描述
起始范围
1 < n < 10000
n < m < 10000

输出描述
ABC保证A < B < C
输出格式A B C
多组勾股数元组，按照A B C升序的排序方式输出。
若给定范围内，找不到勾股数元组时，输出Na。

示例一

输入
1
20
输出
3 4 5
5 12 13
8 15 17
示例二
输入
5
10
输出
Na
思路
遍历值域
判断三个数互质并且较小的两个数的平方和等于较大数的平方，即满足毕达哥拉斯定理
输出如何条件的值

参考解题 Python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created with IntelliJ IDEA.
File: main0001.py
Author: Amos
E-mail: amos@amoscloud.com
Date: 2023/2/8
Time: 9:18
Description:
"""

# 接收输入
s, e = int(input()), int(input())
# 计数器用于判断是否有解
count = 0


# 定义函数用于互质判断
def relatively_prime(x, y):
    if x == y and y == 1:
        return False
    min_value = min(x, y)
    for i in range(2, min_value):
        if x % i == 0 and y % i == 0:
            return False
    return True


# 遍历值域
for i in range(s, e - 2):
    for j in range(i + 1, e - 1):
        for k in range(j + 1, e):
            # 符合条件输出结果
            if (relatively_prime(i, j) and
                    relatively_prime(j, k) and
                    relatively_prime(i, k) and
                    i ** 2 + j ** 2 == k ** 2):
                count += 1
                print(f'{i} {j} {k}')


# 无解输出Na
if count == 0:
    print('Na')


## 题目0002-整数对最小和
整数对最小和
感谢网友明日乌鸦 <mrdwy.luo@qq.com>的指正，题目解已经与2023年1月14日更新。

题目描述
给定两个整数数组 array1 array2
数组元素按升序排列
假设从array1 array2中分别取出一个元素可构成一对元素
现在需要取出K个元素
并对取出的所有元素求和
计算和的最小值
注意：
两对元素如果对应于array1 array2中的两个下标均相同，则视为同一个元素

输入描述
输入两行数组array1 array2
每行首个数字为数组大小 size( 0 < size <= 100)
0 < array1(i) <= 1000
0 < array2(i) <= 1000
接下来一行为正整数k (0 < k <= array1.size() * array2.size())

输出描述
满足要求的最小和

示例一
输入
3 1 1 2
3 1 2 3
2
输出
4
说明
用例中，需要取两个元素 取第一个数组第0个元素 与第二个数组第0个元素，组成一对元素[1,1]
取第一个数组第1个元素 与第二个数组第0个元素，组成一对元素[1,1]
求和为1+1+1+1=4 为满足要求的最小和

思路
组合出所有可能的整数对，并求和
对所有求和结果升序排序
对最小的k个和进行求和

参考解题 Python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created with IntelliJ IDEA.
File: main0002.py
Author: Amos
E-mail: amos@amoscloud.com
Date: 2023/2/8
Time: 9:41
Description:
"""
# 读取输入
line1, line2, k = input(), input(), int(input())


# 函数用于将字符串解析为列表
def parse_array(line):
    split = line.split()
    return [int(split[s]) for s in range(1, len(split))]


# sums用于保存所有整数对的和，res用于最终保存结果
sums, res = [], 0
# 组合出所有可能的整数对，并求和
for x in parse_array(line1):
    for y in parse_array(line2):
        sums.append(x + y)
# 升序排序
sums.sort()
# 前k个求和
for i in range(k):
    res += sums[i]

print(res)


## 题目0227-递增字符串
递增字符串
题目描述
定义字符串完全由 'A' 和 'B'组成，当然也可以全是'A'或全是'B'。如果字符串从前往后都是以字典序排列的，那么我们称之为严格递增字符串。
给出一个字符串s，允许修改字符串中的任意字符，即可以将任何的'A'修改成'B'，也可以将任何的'B'修改成'A'，求可以使s满足严格递增的最小修改次数。0<s的长度<100000。

输入描述
输入一个字符串： "AABBA"

输出描述
输出：1
修改最后一位得到AABBB。

示例一
输入
AABBA
输出
1
说明
参考解题 Java
import java.util.Scanner;

/**
 * Created with IntelliJ IDEA.
 *
 * @Author: Amos
 * @E-mail: amos@amoscloud.com
 * @Date: 2023/2/15
 * @Time: 11:24
 * @Description:
 */
public class Main0227 {
  public static void main(String[] args) {
    try (Scanner scanner = new Scanner(System.in)) {
      String line = scanner.next();
      System.out.println(solution(line));
    }
  }

  public static int solution(String str) {
    int n = str.length();
    int A = str.replaceAll("B", "").length();

    int dp = 0;
    if (str.charAt(0) == 'A') dp = 1;
    int ans = check(0, dp, A - dp);

    for (int i = 1; i < n; i++) {
      if (str.charAt(i) == 'A') dp += 1;
      ans = Math.min(ans, check(i, dp, A - dp));
    }

    return ans;
  }

  public static int check(int brandIdx, int brand_LM_A, int brand_R_A) {
    return brandIdx + 1 - brand_LM_A + brand_R_A;
  }
}
